@page "/invoice"
@using SqliteWasmHelper
@using blazor_bi.Data
@inject ISqliteWasmDbContextFactory<ThingContext> Factory
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Invoice</PageTitle>

<script>
    window.fn = {
    writeToCache: async function (buffer) {
    const cachePath = `/data/cache/chinook.db`;
    const cache = await caches.open('SqliteWasmHelper');
    const resp = await cache.match(cachePath);

    if (resp && resp.ok) {
    return false;
    }

    const fileUrl = "data:application/octet-stream;base64," + buffer;
    const res = await fetch(fileUrl);
    const blob = await res.blob();

    const headers = new Headers({
    'content-length': blob.size
    });

    const response = new Response(blob, {
    headers
    });

    await cache.put(cachePath, response);

    console.log("Data cached.");

    //location.Reload(); // Necessary step to be able to see the cache
    }
    }
</script>

<h3>Invoice</h3>

@code {
    protected override async Task OnInitializedAsync()
    {
        int id = 3;

        try {
            /*var stream = await Http.GetStreamAsync("sample-data/chinook.db"); // file in the wwwroot
            var buffer = new byte[stream.Length];
            using var ms = new MemoryStream(buffer, 0, buffer.Length);
            await stream.CopyToAsync(ms);

            string base64 = Convert.ToBase64String(ms.ToArray());
            await JS!.InvokeVoidAsync("fn.writeToCache", base64);*/

            using var ctx = await Factory.CreateDbContextAsync();
            var invoices = ctx.Things;
            Console.WriteLine(invoices.First().Id.ToString());
            //ctx.Things.Add(new Thing { Id = 1, Name = "newThing" });
            //await ctx.SaveChangesAsync();


            //var stream = await Http.GetStreamAsync("sample-data/chinook.xml");
            //new Microsoft.Data.Sqlite.SqliteBlob()
            using (var connection = new Microsoft.Data.Sqlite.SqliteConnection("Data Source=chinook.db"))
            {
                await connection.OpenAsync();

                var command = connection.CreateCommand();
                command.CommandText = @"SELECT count(*) as Result from invoices";
                //command.CommandText = @"SELECT name FROM sqlite_master WHERE type='table'";
                //command.Parameters.AddWithValue("$id", id);

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var name = reader.GetString(1);

                        Console.WriteLine($"Hello, {name}!");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
}
