@page "/invoice"
@using SqliteWasmHelper
@using Data
@using System.Data.Entity
@inject ISqliteWasmDbContextFactory<ChinookContext> Factory
@inject HttpClient Http

<PageTitle>Invoice</PageTitle>

<h3>Invoice</h3>

@if (invoices == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Items">Items</th>
                <th aria-label="Items count">Count</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var invoice in invoices)
            {
                <tr>
                    <td>@invoice.InvoiceDate.ToShortDateString()</td>
                    <td>@invoice.ItemList()</td>
                    <td>@invoice.InvoiceItems.Count()</td>
                    <td>@invoice.Total</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private Data.Invoice[]? invoices;
    protected override async Task OnInitializedAsync()
    {

        try {
            using var ctx = await Factory.CreateDbContextAsync();
            invoices = ctx.Invoices.Include(inv => inv.InvoiceItems).Include().ToList();
            foreach (var invoice in invoices) {
                invoice.InvoiceItems = ctx.InvoiceItems.Where(i => i.InvoiceId == invoice.InvoiceId).ToList();
            }
            //Console.WriteLine(invoices.Count());

/*
            //var stream = await Http.GetStreamAsync("sample-data/chinook.xml");
            //new Microsoft.Data.Sqlite.SqliteBlob()
            using (var connection = new Microsoft.Data.Sqlite.SqliteConnection("Data Source=chinook.db"))
            {
                await connection.OpenAsync();

                var command = connection.CreateCommand();
                command.CommandText = @"SELECT count(*) as Result from invoices";
                //command.CommandText = @"SELECT name FROM sqlite_master WHERE type='table'";
                //command.Parameters.AddWithValue("$id", id);

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        //var name = reader.GetString(1);
                        var count = reader.GetInt16(0);

                        Console.WriteLine($"Hello, {count}!");
    using Microsoft.EntityFrameworkCore;
                    }
                }

                
            } */
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
}
